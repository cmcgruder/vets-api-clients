{
	"info": {
		"_postman_id": "6bbc455c-053f-4d2f-8f5c-e8f34dd38b6b",
		"name": "CCG Pre-request Script",
		"description": "Postman CCG Pre-request Script\n\nDescription:\n\nThis Postman collection contains pre-script request methods for VA API's using CCG OAuth. It generates a JWT assertion, requests an OAuth access token, and shows an example call interacting with the Benefits Claims API.\n\nConfiguration:\n\n1\\. Import the \"CCG Pre-request Script.postman_collection.json\" into your Postman workspace.\n\n2\\. Set Collection Variables:  \nConfigure collection variables (aud, clientId, privatePem, scope) in Postman, assigning them their respective values. Follow the guidance provided at [https://developer.va.gov/explore/api/benefits-claims/client-credentials](https://developer.va.gov/explore/api/benefits-claims/client-credentials) to obtain the necessary collection variable values for the Benefits Claims API. For other APIs, consult the Lighthouse CCG API page related to your desired interaction for accurate API-specific collection variable values.\n\na. aud (Collection variable)  \nExample Benefits Claims API aud value:  \n[https://deptva-eval.okta.com/oauth2/ausdg7guis2TYDlFe2p7/v1/token](https://deptva-eval.okta.com/oauth2/ausdg7guis2TYDlFe2p7/v1/token)\n\nb. clientId (Collection variable)  \nExample clientId value:  \nyour ccg client id\n\nc. privatePem (Collection variable)  \nExample privatePem value:  \n\\-----BEGIN RSA PRIVATE KEY-----  \nyour private pem  \n\\-----END RSA PRIVATE KEY-----\n\nd. scope (Collection variable)  \nExample Benefits Claims API scope value:  \nsystem/claim.read system/claim.write\n\nRun:\n\n1\\. Run \"ccg-api-request\":  \nThis step generates a JWT assertion, requests an OAuth access token, and shows an example call interacting with the Lighthouse API of choice.\n\na. Click on “ccg-api-request” in the left column of Postman (under the CCG Pre-request Script Collection). The pre-configured HTTP call will appear.  \nb. Click \"Send\".\n\nNote: Ensure that you have valid values for the collection variables, as incorrect or missing values may result in issues.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30064595"
	},
	"item": [
		{
			"name": "ccg-api-request",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const uuid = require(\"uuid\")",
							"let kjur",
							"",
							"const aud = pm.collectionVariables.get(\"aud\")",
							"const scope = pm.collectionVariables.get(\"scope\")",
							"const clientId = pm.collectionVariables.get(\"clientId\")",
							"const privatePem = pm.collectionVariables.get(\"privatePem\")",
							"",
							"function checkVariables() {",
							"    const requiredVariables = [\"jsrsasign-js\", \"aud\", \"clientId\", \"privatePem\", \"scope\"]",
							"    console.info(\"Checking if required collection variables are set...\")",
							"    const missingOrNullOrUndefinedVariables = requiredVariables.filter(variable => {",
							"        const value = pm.collectionVariables.get(variable)",
							"        return value === \"\" || value === undefined || value === null",
							"    })",
							"    if (missingOrNullOrUndefinedVariables.length > 0) {",
							"        missingOrNullOrUndefinedVariables.forEach(variable => {",
							"            console.log(`Collection variable '${variable}' is either missing or has a null/undefined value.`)",
							"        })",
							"        return 0",
							"    } else {",
							"        console.info(\"All required collection variables are set with non-null values.\")",
							"        return 1",
							"    }",
							"}",
							"",
							"function getAssertion() {",
							"    const secondsSinceEpoch = Math.round(Date.now() / 1000)",
							"    const header = {",
							"        alg: \"RS256\",",
							"        typ: \"JWT\"",
							"    }",
							"    const claims = {",
							"        \"aud\": aud,",
							"        \"iss\": clientId,",
							"        \"sub\": clientId,",
							"        \"jti\": uuid.v4(),",
							"        \"iat\": secondsSinceEpoch,",
							"        \"exp\": secondsSinceEpoch + 60",
							"    }",
							"    const jwt = kjur.jws.JWS.sign(null, header, claims, privatePem)",
							"    console.info(\"JWT assertion: \" + jwt)",
							"    const urlencoded = [{",
							"            key: \"grant_type\",",
							"            value: \"client_credentials\",",
							"            disabled: false",
							"        },",
							"        {",
							"            key: \"client_assertion_type\",",
							"            value: \"urn:ietf:params:oauth:client-assertion-type:jwt-bearer\",",
							"            disabled: false",
							"        },",
							"        {",
							"            key: \"client_assertion\",",
							"            value: jwt,",
							"            disabled: false",
							"        },",
							"        {",
							"            key: \"scope\",",
							"            value: scope,",
							"            disabled: false",
							"        }",
							"    ]",
							"    return urlencoded",
							"}",
							"",
							"function getToken(urlencoded) {",
							"    const req = {",
							"        url: aud,",
							"        method: \"POST\",",
							"        headers: {",
							"            \"Content-Type\": \"Content-Type: application/x-www-form-urlencoded\"",
							"        },",
							"        body: {",
							"            mode: \"urlencoded\",",
							"            urlencoded: urlencoded",
							"        }",
							"    }",
							"",
							"    console.info(\"Requesting a new access token...\")",
							"",
							"    pm.sendRequest(req, (err, resp) => {",
							"        const data = resp.json()",
							"        if (err || data.error) {",
							"            console.warn(\"Could not get the access token.\")",
							"            console.error(err || data.error)",
							"            throw new Error(\"Unable to obtain token, check the console for more details.\")",
							"        }",
							"        console.info(data)",
							"        pm.collectionVariables.set(\"access_token\", data.access_token)",
							"    })",
							"}",
							"",
							"function run() {",
							"    if (checkVariables()) {",
							"        navigator = {}",
							"        window = {}",
							"        eval(pm.collectionVariables.get(\"jsrsasign-js\"))",
							"        kjur = KJUR",
							"        getToken(getAssertion())",
							"    }",
							"}",
							"",
							"if (pm.collectionVariables.has(\"jsrsasign-js\")) {",
							"    run()",
							"} else {",
							"    pm.sendRequest(\"http://kjur.github.io/jsrsasign/jsrsasign-latest-all-min.js\", (err, res) => {",
							"        pm.collectionVariables.set(\"jsrsasign-js\", res.text())",
							"        run()",
							"    })",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": []
				},
				"url": {
					"raw": "https://sandbox-api.va.gov/services/claims/v2/veterans/1012667145V762142/claims",
					"protocol": "https",
					"host": [
						"sandbox-api",
						"va",
						"gov"
					],
					"path": [
						"services",
						"claims",
						"v2",
						"veterans",
						"1012667145V762142",
						"claims"
					]
				},
				"description": "\"ccg-api-request\" generates a signed JSON Web Token (JWT) and retrieves an access token, facilitating seamless communication with the Lighthouse API of choice in the HTTP request."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "aud",
			"value": "https://deptva-eval.okta.com/oauth2/ausdg7guis2TYDlFe2p7/v1/token"
		},
		{
			"key": "clientId",
			"value": "",
			"type": "string"
		},
		{
			"key": "privatePem",
			"value": "",
			"type": "string"
		},
		{
			"key": "scope",
			"value": "system/claim.read system/claim.write",
			"type": "string"
		}
	]
}