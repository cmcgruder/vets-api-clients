{
	"info": {
		"_postman_id": "4a896832-c77a-46b1-b107-0528de527bb7",
		"name": "CCG Pre-request Script",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30064595"
	},
	"item": [
		{
			"name": "load jsrsasign-js",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.globals.set(\"jsrsasign-js\", responseBody)"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://kjur.github.io/jsrsasign/jsrsasign-latest-all-min.js",
					"protocol": "http",
					"host": [
						"kjur",
						"github",
						"io"
					],
					"path": [
						"jsrsasign",
						"jsrsasign-latest-all-min.js"
					]
				}
			},
			"response": []
		},
		{
			"name": "ccg-api-request",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const uuid = require('uuid')",
							"",
							"navigator = {}",
							"window = {}",
							"eval(pm.globals.get(\"jsrsasign-js\"))",
							"",
							"const getTextBetweenWords = (inputString, startWord, endWord) => {",
							"    const regex = new RegExp(`${startWord}(.*?)${endWord}`);",
							"    const match = inputString.match(regex);",
							"    return match ? match[1].trim() : null;",
							"}",
							"",
							"const setVariables = (aud) => {",
							"    const authServer = getTextBetweenWords(aud, \"oauth2/\", \"/v\");",
							"    pm.sendRequest(\"https://deptva-eval.okta.com/oauth2/\" + authServer + \"/.well-known/oauth-authorization-server\", function(err, response) {",
							"        pm.globals.set(\"token_endpoint\", response.json().token_endpoint);",
							"    })",
							"}",
							"",
							"const getAssertion = () => {",
							"    const secondsSinceEpoch = Math.round(Date.now() / 1000)",
							"    const header = {",
							"        alg: 'RS256',",
							"        typ: 'JWT'",
							"    }",
							"    const claims = {",
							"        \"aud\": pm.globals.get(\"aud\"),",
							"        \"iss\": pm.globals.get(\"clientId\"),",
							"        \"sub\": pm.globals.get(\"clientId\"),",
							"        \"jti\": uuid.v4(),",
							"        \"iat\": secondsSinceEpoch,",
							"        \"exp\": secondsSinceEpoch + 60",
							"    };",
							"    const privateKey = pm.globals.get(\"privatePem\")",
							"    const jwt = KJUR.jws.JWS.sign(null, header, claims, privateKey)",
							"",
							"    const urlencoded = [{",
							"            key: 'grant_type',",
							"            value: 'client_credentials',",
							"            disabled: false",
							"        },",
							"        {",
							"            key: 'client_assertion_type',",
							"            value: 'urn:ietf:params:oauth:client-assertion-type:jwt-bearer',",
							"            disabled: false",
							"        },",
							"        {",
							"            key: 'client_assertion',",
							"            value: jwt,",
							"            disabled: false",
							"        },",
							"        {",
							"            key: 'scope',",
							"            value: pm.globals.get(\"scope\"),",
							"            disabled: false",
							"        }",
							"    ]",
							"    return urlencoded",
							"}",
							"",
							"const getToken = (urlencoded) => {",
							"    const req = {",
							"        url: pm.globals.get(\"token_endpoint\"),",
							"        method: 'POST',",
							"        headers: {",
							"            'Content-Type': 'Content-Type: application/x-www-form-urlencoded'",
							"        },",
							"        body: {",
							"            mode: 'urlencoded',",
							"            urlencoded: urlencoded",
							"        }",
							"    }",
							"",
							"    console.info('Requesting a new access token')",
							"",
							"    return new Promise((resolve, reject) => {",
							"        pm.sendRequest(req, (err, resp) => {",
							"            if (err) {",
							"                console.warn('Could not get the access token')",
							"                console.warn(err)",
							"                throw new Error('Unable to obtain token, check the console for more details.')",
							"            }",
							"            const data = resp.json()",
							"            console.info(data)",
							"            pm.globals.set(\"access_token\", data.access_token);",
							"            if (data.error) {",
							"                console.warn('Could not get the access token')",
							"                console.warn(data)",
							"                throw new Error('Unable to obtain token, check the console for more details.')",
							"            }",
							"            return resolve(data)",
							"        })",
							"    })",
							"}",
							"",
							"setVariables(pm.globals.get(\"aud\"))",
							"setTimeout(() => {",
							"    getToken(getAssertion())",
							"}, 1000)"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": []
				},
				"url": {
					"raw": "https://sandbox-api.va.gov/services/claims/v2/veterans/1012667145V762142/claims",
					"protocol": "https",
					"host": [
						"sandbox-api",
						"va",
						"gov"
					],
					"path": [
						"services",
						"claims",
						"v2",
						"veterans",
						"1012667145V762142",
						"claims"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "test",
			"value": ""
		}
	]
}