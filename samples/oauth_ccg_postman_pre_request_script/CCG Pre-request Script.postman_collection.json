{
	"info": {
		"_postman_id": "2ea0c2ed-188e-471a-b6a0-39b76d57a4ff",
		"name": "CCG Pre-request Script",
		"description": "Postman CCG Pre-request Script\n\nDescription:\n\nEnhance your developer experience with the Postman CCG Pre-request Script, streamlining interactions with Lighthouse CCG APIs. This script effortlessly produces a signed JSON Web Token (JWT) and fetches an access token, ensuring smooth communication with Lighthouse APIs. While the provided Postman collection focuses on the Benefits Claims API, it seamlessly adapts to other CCG Lighthouse APIs. Simply configure the necessary collection variables (aud, clientId, privatePem, scope) in Postman to tailor it to your chosen API interaction.\n\nSteps to Use:\n\n1\\. Import the Postman Collection:  \na. Download and import the \"CCG Pre-request Script.postman_collection.json\" into your Postman workspace.\n\n2\\. Set Collection Variables:  \nConfigure collection variables (aud, clientId, privatePem, scope) in Postman, assigning them their respective values. Follow the guidance provided at [https://developer.va.gov/explore/api/benefits-claims/client-credentials](https://developer.va.gov/explore/api/benefits-claims/client-credentials) to obtain the necessary collection variable values for the Benefits Claims API. For other APIs, consult the Lighthouse CCG API page related to your desired interaction for accurate API-specific collection variable values.\n\na. aud (Collection variable)  \nExample aud value: [https://deptva-eval.okta.com/oauth2/ausdg7guis2TYDlFe2p7/v1/token](https://deptva-eval.okta.com/oauth2/ausdg7guis2TYDlFe2p7/v1/token)\n\nb. clientId (Collection variable)  \nExample clientId value: your ccg client id\n\nc. privatePem (Collection variable)  \nExample privatePem value:  \n\\-----BEGIN RSA PRIVATE KEY-----  \nyour private pem  \n\\-----END RSA PRIVATE KEY-----\n\nd. scope (Collection variable)  \nExample scope value: system/claim.read system/claim.write\n\n3\\. Run \"ccg-api-request\":  \nThis step generates a signed JWT and retrieves the access token needed for calling the Lighthouse API of choice.\n\na. Click on “ccg-api-request” in the left column of Postman (under the CCG Pre-request Script Collection). The pre-configured HTTP call will appear.  \nb. Click \"Send\".\n\nNote: Ensure that you have valid values for the collection variables, as incorrect or missing values may result in authentication issues.\n\nBy following these steps, developers can seamlessly authenticate and interact with the Lighthouse CCG APIs using Postman.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30064595"
	},
	"item": [
		{
			"name": "ccg-api-request",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const uuid = require(\"uuid\")",
							"",
							"navigator = {}",
							"window = {}",
							"eval(pm.collectionVariables.get(\"jsrsasign-js\"))",
							"",
							"const aud = pm.collectionVariables.get(\"aud\");",
							"const scope = pm.collectionVariables.get(\"scope\");",
							"const clientId = pm.collectionVariables.get(\"clientId\");",
							"const privatePem = pm.collectionVariables.get(\"privatePem\");",
							"",
							"const checkVariables = () => {",
							"    const requiredVariables = [\"jsrsasign-js\", \"aud\", \"clientId\", \"privatePem\", \"scope\"];",
							"    console.info(\"Checking if required collection variables are set...\");",
							"    const missingOrNullOrUndefinedVariables = requiredVariables.filter(variable => {",
							"        const value = pm.collectionVariables.get(variable);",
							"        return value === \"\" || value === undefined || value === null;",
							"    });",
							"    if (missingOrNullOrUndefinedVariables.length > 0) {",
							"        missingOrNullOrUndefinedVariables.forEach(variable => {",
							"            console.log(`Collection variable '${variable}' is either missing or has a null/undefined value.`);",
							"        });",
							"    } else {",
							"        console.info(\"All required collection variables are set with non-null values.\");",
							"    }",
							"};",
							"",
							"const getAssertion = () => {",
							"    const secondsSinceEpoch = Math.round(Date.now() / 1000)",
							"    const header = {",
							"        alg: \"RS256\",",
							"        typ: \"JWT\"",
							"    }",
							"    const claims = {",
							"        \"aud\": aud,",
							"        \"iss\": clientId,",
							"        \"sub\": clientId,",
							"        \"jti\": uuid.v4(),",
							"        \"iat\": secondsSinceEpoch,",
							"        \"exp\": secondsSinceEpoch + 60",
							"    };",
							"    const jwt = KJUR.jws.JWS.sign(null, header, claims, privatePem)",
							"    console.info(\"Signed JWT: \" + jwt)",
							"    const urlencoded = [{",
							"            key: \"grant_type\",",
							"            value: \"client_credentials\",",
							"            disabled: false",
							"        },",
							"        {",
							"            key: \"client_assertion_type\",",
							"            value: \"urn:ietf:params:oauth:client-assertion-type:jwt-bearer\",",
							"            disabled: false",
							"        },",
							"        {",
							"            key: \"client_assertion\",",
							"            value: jwt,",
							"            disabled: false",
							"        },",
							"        {",
							"            key: \"scope\",",
							"            value: scope,",
							"            disabled: false",
							"        }",
							"    ]",
							"    return urlencoded",
							"}",
							"",
							"const getToken = (urlencoded) => {",
							"    const req = {",
							"        url: aud,",
							"        method: \"POST\",",
							"        headers: {",
							"            \"Content-Type\": \"Content-Type: application/x-www-form-urlencoded\"",
							"        },",
							"        body: {",
							"            mode: \"urlencoded\",",
							"            urlencoded: urlencoded",
							"        }",
							"    }",
							"",
							"    console.info(\"Requesting a new access token...\")",
							"",
							"    pm.sendRequest(req, (err, resp) => {",
							"        const data = resp.json()",
							"        if (err || data.error) {",
							"            console.warn(\"Could not get the access token.\")",
							"            console.error(err || data.error)",
							"            throw new Error(\"Unable to obtain token, check the console for more details.\")",
							"        }",
							"        console.info(data)",
							"        pm.collectionVariables.set(\"access_token\", data.access_token);",
							"    })",
							"}",
							"",
							"checkVariables()",
							"getToken(getAssertion())"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": []
				},
				"url": {
					"raw": "https://sandbox-api.va.gov/services/claims/v2/veterans/1012667145V762142/claims",
					"protocol": "https",
					"host": [
						"sandbox-api",
						"va",
						"gov"
					],
					"path": [
						"services",
						"claims",
						"v2",
						"veterans",
						"1012667145V762142",
						"claims"
					]
				},
				"description": "\"ccg-api-request\" generates a signed JSON Web Token (JWT) and retrieves an access token, facilitating seamless communication with the Lighthouse API of choice in the HTTP request."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "aud",
			"value": ""
		},
		{
			"key": "clientId",
			"value": "",
			"type": "string"
		},
		{
			"key": "privatePem",
			"value": "",
			"type": "string"
		},
		{
			"key": "scope",
			"value": "",
			"type": "string"
		},
		{
			"key": "jsrsasign-js",
			"value": ""
		}
	]
}