{
	"info": {
		"_postman_id": "c863e712-c67d-4330-a152-df1230e899a5",
		"name": "Lighthouse OAuth API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20417651"
	},
	"item": [
		{
			"name": "CCG Token",
			"item": [
				{
					"name": "loan-guaranty/system/v1/token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const uuid = require('uuid')",
									"let kjur;",
									"",
									"const AUD = \"https://deptva-eval.okta.com/oauth2/auseavl6o5AjGZr2n2p7/v1/token\";",
									"// This value is set at the Lighthouse OAuth API collection > variables tab",
									"const CLIENT_ID = pm.collectionVariables.get(\"loan-guaranty_clientId\");",
									"// This value is set at the Lighthouse OAuth API collection > variables tab",
									"const PRIVATE_PEM = pm.collectionVariables.get(\"loan-guaranty_privatePem\");",
									"",
									"const required = {",
									"    \"aud\": AUD, ",
									"    \"loan-guaranty_clientId\": CLIENT_ID, ",
									"    \"loan-guaranty_privatePem\": PRIVATE_PEM",
									"}",
									"for (const [key, value] of Object.entries(required)) {",
									"  if (!value) console.error(key + \" is required\");",
									"}",
									"",
									"function getAssertion() {",
									"    const secondsSinceEpoch = Math.round(Date.now() / 1000);",
									"    const header = {",
									"        alg: 'RS256',",
									"        typ: 'JWT'",
									"    }",
									"    const payload = {",
									"        \"aud\": AUD,",
									"        \"iss\": CLIENT_ID,",
									"        \"sub\": CLIENT_ID,",
									"        \"jti\": uuid.v4(),",
									"        \"iat\": secondsSinceEpoch,",
									"        \"exp\": secondsSinceEpoch + 60",
									"    }",
									"    const jwt = kjur.jws.JWS.sign(null, header, payload, PRIVATE_PEM);",
									"    pm.collectionVariables.set(\"client_assertion\", jwt);",
									"    console.info(\"assertion: \" + jwt);",
									"}",
									"",
									"function run() {",
									"    navigator = {}",
									"    window = {}",
									"    eval(pm.collectionVariables.get(\"import_do_not_edit\"));",
									"    kjur = KJUR;",
									"    getAssertion();",
									"}",
									"run();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true,
							"accept": true,
							"connection": true,
							"accept-encoding": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								},
								{
									"key": "client_assertion_type",
									"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
									"type": "text"
								},
								{
									"key": "client_assertion",
									"value": "{{client_assertion}}",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "launch system.loan-remittance.read system.loan-review.write system.remediation-evidence.write",
									"type": "text"
								},
								{
									"key": "launch",
									"value": "eyAic3RhM24iOiAiOTkzIiwgInBhdGllbnQiOiAiMTAwMDcyMDEwMFYyNzEzODciIH0=",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://sandbox-api.va.gov/oauth2/loan-guaranty/system/v1/token",
							"protocol": "https",
							"host": [
								"sandbox-api",
								"va",
								"gov"
							],
							"path": [
								"oauth2",
								"loan-guaranty",
								"system",
								"v1",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "claims/system/v1/token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const uuid = require('uuid')",
									"let kjur;",
									"",
									"const AUD = \"https://deptva-eval.okta.com/oauth2/ausdg7guis2TYDlFe2p7/v1/token\";",
									"// This value is set at the Lighthouse OAuth API collection > variables tab",
									"const CLIENT_ID = pm.collectionVariables.get(\"claims_clientId\");",
									"// This value is set at the Lighthouse OAuth API collection > variables tab",
									"const PRIVATE_PEM = pm.collectionVariables.get(\"claims_privatePem\");",
									"",
									"const required = {",
									"    \"aud\": AUD, ",
									"    \"claims_clientId\": CLIENT_ID, ",
									"    \"claims_privatePem\": PRIVATE_PEM",
									"}",
									"for (const [key, value] of Object.entries(required)) {",
									"  if (!value) console.error(key + \" is required\");",
									"}",
									"",
									"function getAssertion() {",
									"    const secondsSinceEpoch = Math.round(Date.now() / 1000);",
									"    const header = {",
									"        alg: 'RS256',",
									"        typ: 'JWT'",
									"    }",
									"    const payload = {",
									"        \"aud\": AUD,",
									"        \"iss\": CLIENT_ID,",
									"        \"sub\": CLIENT_ID,",
									"        \"jti\": uuid.v4(),",
									"        \"iat\": secondsSinceEpoch,",
									"        \"exp\": secondsSinceEpoch + 60",
									"    }",
									"    const jwt = kjur.jws.JWS.sign(null, header, payload, PRIVATE_PEM);",
									"    pm.collectionVariables.set(\"client_assertion\", jwt);",
									"    console.info(\"assertion: \" + jwt);",
									"}",
									"",
									"function run() {",
									"    navigator = {}",
									"    window = {}",
									"    eval(pm.collectionVariables.get(\"import_do_not_edit\"));",
									"    kjur = KJUR;",
									"    getAssertion();",
									"}",
									"run();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true,
							"accept": true,
							"connection": true,
							"accept-encoding": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								},
								{
									"key": "client_assertion_type",
									"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
									"type": "text"
								},
								{
									"key": "client_assertion",
									"value": "{{client_assertion}}",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "system/claim.read system/claim.write",
									"type": "text"
								},
								{
									"key": "launch",
									"value": "eyAic3RhM24iOiAiOTkzIiwgInBhdGllbnQiOiAiMTAwMDcyMDEwMFYyNzEzODciIH0=",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://sandbox-api.va.gov/oauth2/claims/system/v1/token",
							"protocol": "https",
							"host": [
								"sandbox-api",
								"va",
								"gov"
							],
							"path": [
								"oauth2",
								"claims",
								"system",
								"v1",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "health/system/v1/token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const uuid = require('uuid')",
									"let kjur;",
									"",
									"const AUD = \"https://deptva-eval.okta.com/oauth2/aus8nm1q0f7VQ0a482p7/v1/token\";",
									"// This value is set at the Lighthouse OAuth API collection > variables tab",
									"const CLIENT_ID = pm.collectionVariables.get(\"phapi_clientId\");",
									"// This value is set at the Lighthouse OAuth API collection > variables tab",
									"const PRIVATE_PEM = pm.collectionVariables.get(\"phapi_privatePem\");",
									"",
									"const required = {",
									"    \"aud\": AUD, ",
									"    \"phapi_clientId\": CLIENT_ID, ",
									"    \"phapi_privatePem\": PRIVATE_PEM",
									"}",
									"for (const [key, value] of Object.entries(required)) {",
									"  if (!value) console.error(key + \" is required\");",
									"}",
									"",
									"function getAssertion() {",
									"    const secondsSinceEpoch = Math.round(Date.now() / 1000);",
									"    const header = {",
									"        alg: 'RS256',",
									"        typ: 'JWT'",
									"    }",
									"    const payload = {",
									"        \"aud\": AUD,",
									"        \"iss\": CLIENT_ID,",
									"        \"sub\": CLIENT_ID,",
									"        \"jti\": uuid.v4(),",
									"        \"iat\": secondsSinceEpoch,",
									"        \"exp\": secondsSinceEpoch + 60",
									"    }",
									"    const jwt = kjur.jws.JWS.sign(null, header, payload, PRIVATE_PEM);",
									"    pm.collectionVariables.set(\"client_assertion\", jwt);",
									"    console.info(\"assertion: \" + jwt);",
									"}",
									"",
									"function run() {",
									"    navigator = {}",
									"    window = {}",
									"    eval(pm.collectionVariables.get(\"import_do_not_edit\"));",
									"    kjur = KJUR;",
									"    getAssertion();",
									"}",
									"run();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true,
							"accept": true,
							"connection": true,
							"accept-encoding": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								},
								{
									"key": "client_assertion_type",
									"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
									"type": "text"
								},
								{
									"key": "client_assertion",
									"value": "{{client_assertion}}",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "launch system/AllergyIntolerance.read",
									"type": "text"
								},
								{
									"key": "launch",
									"value": "eyAic3RhM24iOiAiOTkzIiwgInBhdGllbnQiOiAiMTAwMDcyMDEwMFYyNzEzODciIH0=",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/oauth2/health/system/v1/token",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"oauth2",
								"health",
								"system",
								"v1",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "veteran-verification/system/v1/token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const uuid = require('uuid')",
									"let kjur;",
									"",
									"const AUD = \"https://deptva-eval.okta.com/oauth2/ausi3u00gw66b9Ojk2p7/v1/token\";",
									"// This value is set at the Lighthouse OAuth API collection > variables tab",
									"const CLIENT_ID = pm.collectionVariables.get(\"vshe_clientId\");",
									"// This value is set at the Lighthouse OAuth API collection > variables tab",
									"const PRIVATE_PEM = pm.collectionVariables.get(\"vshe_privatePem\");",
									"",
									"const required = {",
									"    \"aud\": AUD, ",
									"    \"vshe_clientId\": CLIENT_ID, ",
									"    \"vshe_privatePem\": PRIVATE_PEM",
									"}",
									"for (const [key, value] of Object.entries(required)) {",
									"  if (!value) console.error(key + \" is required\");",
									"}",
									"",
									"function getAssertion() {",
									"    const secondsSinceEpoch = Math.round(Date.now() / 1000);",
									"    const header = {",
									"        alg: 'RS256',",
									"        typ: 'JWT'",
									"    }",
									"    const payload = {",
									"        \"aud\": AUD,",
									"        \"iss\": CLIENT_ID,",
									"        \"sub\": CLIENT_ID,",
									"        \"jti\": uuid.v4(),",
									"        \"iat\": secondsSinceEpoch,",
									"        \"exp\": secondsSinceEpoch + 60",
									"    }",
									"    const jwt = kjur.jws.JWS.sign(null, header, payload, PRIVATE_PEM);",
									"    pm.collectionVariables.set(\"client_assertion\", jwt);",
									"    console.info(\"assertion: \" + jwt);",
									"}",
									"",
									"function run() {",
									"    navigator = {}",
									"    window = {}",
									"    eval(pm.collectionVariables.get(\"import_do_not_edit\"));",
									"    kjur = KJUR;",
									"    getAssertion();",
									"}",
									"run();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true,
							"accept": true,
							"connection": true,
							"accept-encoding": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								},
								{
									"key": "client_assertion_type",
									"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
									"type": "text"
								},
								{
									"key": "client_assertion",
									"value": "{{client_assertion}}",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "launch service_history.read",
									"type": "text"
								},
								{
									"key": "launch",
									"value": "eyAic3RhM24iOiAiOTkzIiwgInBhdGllbnQiOiAiMTAwMDcyMDEwMFYyNzEzODciIH0=",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/oauth2/veteran-verification/system/v1/token",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"oauth2",
								"veteran-verification",
								"system",
								"v1",
								"token"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"if (!pm.collectionVariables.has(\"import_do_not_edit\")) {",
					"    pm.sendRequest(\"http://kjur.github.io/jsrsasign/jsrsasign-latest-all-min.js\", (err, res) => {",
					"        pm.collectionVariables.set(\"import_do_not_edit\", res.text());",
					"    })",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "loan-guaranty_clientId",
			"value": "",
			"type": "string"
		},
		{
			"key": "loan-guaranty_privatePem",
			"value": "",
			"type": "string"
		},
		{
			"key": "claims_clientId",
			"value": "",
			"type": "string"
		},
		{
			"key": "claims_privatePem",
			"value": "",
			"type": "string"
		},
		{
			"key": "vshe_clientId",
			"value": "",
			"type": "string"
		},
		{
			"key": "vshe_privatePem",
			"value": "",
			"type": "string"
		},
		{
			"key": "phapi_clientId",
			"value": "",
			"type": "string"
		},
		{
			"key": "phapi_privatePem",
			"value": "",
			"type": "string"
		},
		{
			"key": "client_assertion",
			"value": ""
		},
		{
			"key": "import_do_not_edit",
			"value": ""
		}
	]
}